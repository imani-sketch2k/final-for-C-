
using FinalMuganza.Models;

namespace FinalMuganza.Tests
{
    [TestFixture]
    public class StudentWorkerModelTests
    {
        [Test]
        public void TestInvalidHoursWorkedTooLow()
        {
            // Arrange
            var studentWorker = new StudentWorkerModel("John Doe", "12345", 10, 0);

            // Act
            double salary = studentWorker.WeeklySalary();

            // Assert
            Assert.That(salary, Is.EqualTo(0), "Salary should be zero for invalid hours worked.");
        }

        [Test]
        public void TestInvalidHoursWorkedTooHigh()
        {
            // Arrange
            var studentWorker = new StudentWorkerModel("John Doe", "12345", 10, 20);

            // Act
            double salary = studentWorker.WeeklySalary();

            // Assert
            Assert.That(salary, Is.EqualTo(0), "Salary should be zero for invalid hours worked.");
        }

        [Test]
        public void TestInvalidHourlySalaryTooLow()
        {
            // Arrange
            var studentWorker = new StudentWorkerModel("John Doe", "12345", 5, 10);

            // Act
            double salary = studentWorker.WeeklySalary();

            // Assert
            Assert.That(salary, Is.EqualTo(0), "Salary should be zero for invalid hourly pay.");
        }

        [Test]
        public void TestInvalidHourlySalaryTooHigh()
        {
            // Arrange
            var studentWorker = new StudentWorkerModel("John Doe", "12345", 20, 10);

            // Act
            double salary = studentWorker.WeeklySalary();

            // Assert
            Assert.That(salary, Is.EqualTo(0), "Salary should be zero for invalid hourly pay.");
        }

        [Test]
        public void TestValidInput()
        {
            // Arrange
            var studentWorker = new StudentWorkerModel("John Doe", "12345", 10, 10);

            // Act
            double salary = studentWorker.WeeklySalary();

            // Assert
            Assert.That(salary, Is.EqualTo(100), "Salary should be correct for valid input.");
        }
    }
}
